import { PrismaClient } from '@prisma/client';
import { UpdateUserDTO } from './dto/updatedto.dto';
import { Response } from 'express';
import { ChatService } from 'src/chat/chat.service';
export declare class UserService {
    prisma: PrismaClient<import(".prisma/client").Prisma.PrismaClientOptions, never, import("@prisma/client/runtime/library").DefaultArgs>;
    chatService: ChatService;
    constructor();
    GetById(id: string): Promise<(import("@prisma/client/runtime/library").GetResult<{
        id: string;
        username: string;
        fullname: string;
        avatar: string;
        isTwoFacEnabled: boolean;
        TwoFacSecret: string;
        XP: number;
        level: number | null;
        topaz: number | null;
        win: number;
        loss: number;
        games: number | null;
        rank: number;
        refreshToken: string | null;
        status: boolean;
        createdAt: Date;
    }, unknown> & {}) | null>;
    CreateUser(user: any): Promise<any>;
    FindUser(user: any): Promise<1 | 2>;
    GetUser(user: any): Promise<any>;
    userSetup(id: string, avatar: Express.Multer.File, data: UpdateUserDTO): Promise<void>;
    updateOnlineStatus(id: string, status: boolean): Promise<void>;
    UpdateRefreshToken(id: string, Rt: string): Promise<import("@prisma/client/runtime/library").GetResult<{
        id: string;
        username: string;
        fullname: string;
        avatar: string;
        isTwoFacEnabled: boolean;
        TwoFacSecret: string;
        XP: number;
        level: number | null;
        topaz: number | null;
        win: number;
        loss: number;
        games: number | null;
        rank: number;
        refreshToken: string | null;
        status: boolean;
        createdAt: Date;
    }, unknown> & {}>;
    GetMany(): Promise<(import("@prisma/client/runtime/library").GetResult<{
        id: string;
        username: string;
        fullname: string;
        avatar: string;
        isTwoFacEnabled: boolean;
        TwoFacSecret: string;
        XP: number;
        level: number | null;
        topaz: number | null;
        win: number;
        loss: number;
        games: number | null;
        rank: number;
        refreshToken: string | null;
        status: boolean;
        createdAt: Date;
    }, unknown> & {})[]>;
    deleteGroups(id: string): Promise<void>;
    DeleteUser(id: string, res: Response): Promise<void>;
    deleteGames(id: string): Promise<void>;
    deleteAchievements(id: string): Promise<void>;
    FindbyID(id: string): Promise<(import("@prisma/client/runtime/library").GetResult<{
        id: string;
        username: string;
        fullname: string;
        avatar: string;
        isTwoFacEnabled: boolean;
        TwoFacSecret: string;
        XP: number;
        level: number | null;
        topaz: number | null;
        win: number;
        loss: number;
        games: number | null;
        rank: number;
        refreshToken: string | null;
        status: boolean;
        createdAt: Date;
    }, unknown> & {}) | undefined>;
    addFriend(id: string, Id: string): Promise<void>;
    removeFriend(id: string, Id: string): Promise<void>;
    acceptFriend(id: string, Id: string): Promise<void>;
    blockFriend(id: string, Id: string): Promise<void>;
    getFriends(id: string): Promise<(import("@prisma/client/runtime/library").GetResult<{
        id: number;
        senderId: string;
        receiverId: string;
        status: string;
        blockerId: string;
        createdAt: Date;
    }, unknown> & {})[]>;
    getFriend(id: string, Id: string): Promise<(import("@prisma/client/runtime/library").GetResult<{
        id: number;
        senderId: string;
        receiverId: string;
        status: string;
        blockerId: string;
        createdAt: Date;
    }, unknown> & {}) | null>;
    getPendings(id: string): Promise<(import("@prisma/client/runtime/library").GetResult<{
        id: number;
        senderId: string;
        receiverId: string;
        status: string;
        blockerId: string;
        createdAt: Date;
    }, unknown> & {})[]>;
    getInvitations(id: string): Promise<(import("@prisma/client/runtime/library").GetResult<{
        id: number;
        senderId: string;
        receiverId: string;
        status: string;
        blockerId: string;
        createdAt: Date;
    }, unknown> & {})[]>;
    getBlocked(id: string): Promise<{
        id: string;
        username: string;
        avatar: string;
    }[]>;
    Players(): Promise<{
        avatar: string;
        rank: number;
        username: string;
        level: number | null;
        XP: number;
        topaz: number | null;
    }[]>;
    updateAvatar(Object: any[]): any[];
    GetNotifications(id: string): Promise<(import("@prisma/client/runtime/library").GetResult<{
        id: number;
        type: string;
        status: string;
        senderId: string;
        receiverId: string;
        content: string;
        createdAt: Date;
    }, unknown> & {})[]>;
    addNotifications(senderId: string, receiverId: string, type: string, context: string): Promise<void>;
    deleteNotification(id: number): Promise<void>;
    DeleteAvatar(id: string): Promise<void>;
}
